#line 2 "CoolLexer.cpp"

#line 4 "CoolLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int CoolLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[494] =
    {   0,
       62,   62,   62,   62,    6,    6,   12,   12,   65,   63,
       62,   61,    9,   49,   50,   39,   41,   35,   42,   36,
       40,   57,   56,   55,   46,   47,   45,   37,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   53,
       54,   60,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   51,   52,   38,   49,   39,   42,    6,
        6,    5,    7,    6,    7,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,

        6,    6,    6,    6,    6,   12,   12,   10,   15,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   63,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   11,   62,    3,    2,    0,   57,   48,
       43,   44,   59,   59,   59,   59,   59,   20,   21,   22,
       59,   59,   59,   59,   59,   33,   59,   59,   59,   60,
       58,   58,   58,   58,   58,   58,   20,   21,   22,   58,
       58,   58,   58,   58,   33,   58,   58,   58,   58,    6,

        6,    4,    8,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,    0,
        1,   59,   59,   59,   59,   59,   59,   25,   59,   32,

       34,   59,   59,   59,   58,   58,   58,   58,   58,   58,
       58,   25,   58,   32,   34,   58,   58,   58,   58,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   30,   59,   19,   31,   59,
       59,   26,   27,   28,   59,   30,   58,   19,   31,   58,
       58,   58,   26,   27,   28,   17,   58,    6,    6,    6,

        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   16,   59,   59,   29,   16,   18,   58,   58,   29,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   59,   24,
       58,   24,    6,    6,    6,    6,   12,   12,   12,   12,
       59,   58,    6,    6,   12,   12,   23,   23,    6,    6,
       12,   12,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
       38,   39,   40,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   43,   48,   49,   43,   43,   50,   43,   51,
       52,   53,   43,   54,   55,   56,   57,   58,   59,   43,
       43,   43,   60,    1,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    3,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[507] =
    {   0,
        0,    0,   60,   64,   74,    0,  137,    0,  459, 2269,
      447, 2269, 2269,  425, 2269,  424, 2269, 2269,  416, 2269,
     2269,  412, 2269, 2269,   56,  370, 2269, 2269,    0,  181,
      174,  176,  179,  181,  186,  181,  183,  188,  189, 2269,
     2269,    0,    0,  219,  212,  221,  217,  219,  227,  197,
      222,  227,  228, 2269, 2269, 2269, 2269, 2269, 2269,    0,
      382, 2269,  376,    0,  354,    0,    0,    0,    0,    0,
      341,    0,    0,  267,  334,    0,    0,  284,  347,  277,
      284,  391,  348,  349,  288,  287,  354,  386,    0,    0,
      446,  509,  572,  385,  395,  616,  446,  447,  453,  401,

      509,  510,    0,    0,    0,    0,  348, 2269, 2269,    0,
        0,    0,    0,    0,    0,    0,    0,  328,    0,    0,
      270,  307,    0,    0,  671,  734,  511,  452,  778,  573,
      574,  618,  512,  579,  611,    0,  288,    0,  833,  896,
      959,  642,  671, 1003,  676,  735,  736,  673,  773,  740,
        0,    0,    0,    0,  287, 2269, 2269,  280,  253, 2269,
     2269, 2269,    0,  223,  240,  273,  289,    0,    0,  288,
      282,  286,  291,  333,  337,    0,  351,  393,  441,    0,
        0,  436,  462,  450,  492,  505,    0,    0,  517,  509,
      512,  565,  559,  572,    0,  578,  618,  612,  625,    0,

      256, 2269, 2269,  242,    0,    0,    0,  674,  804,  772,
      833,  835,  836,  837,  842,  889,  896,  898,  952,  899,
      901,  962, 1005,  968, 1058,  963, 1006,  965, 1051,  988,
     1007, 1058, 1060, 1061, 1087, 1094, 1096, 1097, 1107, 1062,
     1112, 1131, 1132, 1138,    0,  219,  207,    0,    0,    0,
     1063, 1150, 1148, 1151, 1166, 1171, 1175, 1176, 1187, 1194,
     1210, 1211, 1199, 1192, 1226, 1223, 1239, 2269, 2269, 1289,
     1243, 1282, 1289, 1292, 1291, 1293, 1294, 1298, 1333, 1318,
     1335, 1336, 1337, 1364, 1352, 1369, 1380, 1375, 1385,  216,
     2269,  671,  672,  683,  686,  723,  727,    0,  727,    0,

        0,  739,  762,  776,  784,  776,  812,  838,  834,  845,
      870,    0,  889,    0,    0,  895,  903,  938,  953, 1409,
     1403, 1418, 1419, 1420, 1437, 1452, 1453, 1454, 1455, 1457,
     1472, 1470, 1489, 1488, 1491, 1504, 1514, 1516, 1525, 1529,
     1532, 1531, 1548, 1550, 1560, 1563, 1566, 1573, 1579, 1594,
     1604, 1607, 1600, 1575, 1627, 1617, 1623, 1636, 1642, 1640,
     1655, 1661, 1667, 1676, 1679, 1682, 1695, 1680, 1707, 1711,
     1713, 1716, 1722, 1728, 1726,    0,  991,    0,    0, 1009,
     1016,    0,    0,    0, 1107,    0, 1142,    0,    0, 1186,
     1203, 1231,    0,    0,    0,    0, 1240, 1739, 1749, 1751,

     1755, 1760, 1767, 1770, 1780, 1783, 1795, 1793, 1798, 1804,
     1808, 1814, 1819, 1835, 1824, 1829, 1839, 1848, 1858, 1852,
     1855, 1867, 1871, 1883, 1892, 1886, 1896, 1898, 1903, 1902,
     1923, 1919, 1930, 1935, 1934, 1940, 1951, 1955, 1966, 1967,
     1972,    0, 1296, 1348,    0,    0,    0, 1401, 1426,    0,
     1971, 1983, 1984, 1978, 1995, 1999, 2011, 2020, 2016, 2022,
     2027, 2051, 2031, 2047, 2058, 2060, 2062, 2063, 1420,    0,
     1422,    0, 2064, 2075, 2095, 2091, 2096, 2098, 2108, 2107,
     1455, 1495, 2111, 2127, 2134, 2145,    0,    0, 2143, 2152,
     2155, 2168, 2269,  213,  212,   67, 2218, 2223, 2228, 2233,

     2238, 2243, 2248, 2253, 2258, 2263
    } ;

static const flex_int16_t yy_def[507] =
    {   0,
      493,    1,    1,    1,  493,    5,  493,    7,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  493,
      493,  495,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  493,  493,  493,  493,  493,  493,  497,
      497,  493,  493,  497,  493,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  498,  498,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  497,  497,
      499,  500,  500,   93,   93,   93,   93,   93,   93,   93,

       93,   93,  497,  497,  497,  501,  501,  493,  493,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  502,  502,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  501,  503,  501,  504,  505,
      505,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      501,  501,  501,  501,  493,  493,  493,  506,  493,  493,
      493,  493,  494,  494,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  497,

      497,  493,  493,  497,  497,  497,  497,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,  499,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,  501,  501,  501,  501,  501,  501,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  493,  493,  504,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  506,
      493,  494,  494,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  494,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  494,  494,  494,  494,  496,  496,  496,  496,  496,
       79,   79,   79,   79,   93,   93,   93,   93,   93,  126,
      126,  126,  126,  141,  141,  141,  141,  141,  494,  494,
      496,  496,   79,   79,   93,   93,  126,  126,  141,  141,
      494,  496,   79,   93,  126,  141,  494,  496,   79,   93,
      126,  141,    0,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493
    } ;

static const flex_int16_t yy_nxt[2333] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       29,   30,   29,   31,   32,   29,   33,   34,   35,   36,
       37,   29,   29,   38,   29,   29,   39,   40,   10,   41,
       42,   43,   43,   44,   43,   45,   46,   43,   47,   48,
       49,   50,   51,   43,   43,   52,   43,   43,   53,   54,
       55,   56,   10,   10,   57,  160,   58,   10,   57,   59,
       58,  181,  161,   59,   60,   61,   62,   60,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   78,   79,   78,   80,   81,   78,

       82,   83,   84,   85,   86,   78,   78,   87,   78,   78,
       88,   89,   60,   90,   91,   92,   92,   93,   92,   94,
       95,   92,   96,   97,   98,   99,  100,   92,   92,  101,
       92,   92,  102,  103,  104,  105,   60,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  125,  126,  125,
      127,  128,  125,  129,  130,  131,  132,  133,  125,  125,
      134,  125,  125,  135,  136,  137,  138,  139,  140,  140,
      141,  140,  142,  143,  140,  144,  145,  146,  147,  148,
      140,  140,  149,  140,  140,  150,  151,  152,  153,  154,

      164,  166,  168,  169,  172,  176,  167,  170,  165,  174,
      173,  171,  177,  178,  179,  175,  180,  163,  291,  247,
      246,  195,  164,  166,  168,  169,  172,  176,  167,  170,
      165,  174,  173,  171,  177,  178,  179,  175,  182,  184,
      186,  188,  191,  195,  185,  189,  183,  187,  192,  190,
      193,  196,  197,  199,  204,  292,  194,  201,  198,  293,
      182,  184,  186,  188,  191,  159,  185,  189,  183,  187,
      192,  190,  193,  196,  197,  199,  205,  292,  194,  248,
      198,  293,  291,  206,  200,  200,  249,  200,  155,  200,
      269,  200,  200,  200,  200,  200,  208,  200,  200,  200,

      200,  200,  200,  208,  211,  294,  208,  208,  295,  212,
      213,  208,  221,  296,  208,  208,  222,  297,  208,  298,
      299,  200,  200,  200,  250,  208,  211,  294,  208,  208,
      295,  212,  213,  208,  221,  296,  208,  208,  222,  297,
      247,  298,  299,  200,  200,  200,  200,  200,  200,  246,
      200,  207,  200,  204,  200,  200,  200,  200,  200,  203,
      200,  200,  200,  200,  200,  200,  209,  208,  208,  300,
      301,  217,  219,  208,  210,  208,  208,  218,  220,  223,
      302,  208,  202,  201,  200,  200,  200,  162,  209,  208,
      208,  300,  301,  217,  219,  208,  210,  208,  208,  218,

      220,  223,  302,  208,  226,  208,  200,  200,  200,  200,
      208,  224,  229,  208,  231,  214,  303,  230,  208,  215,
      226,  232,  226,  216,  159,  158,  226,  208,  226,  157,
      241,  156,  208,  224,  229,  208,  231,  214,  303,  230,
      208,  215,  226,  232,  226,  216,  200,  200,  155,  200,
      226,  200,  241,  200,  200,  200,  200,  200,  493,  200,
      200,  200,  200,  200,  200,  226,  226,  304,  305,  236,
      238,  251,  226,  226,  226,  237,  239,  240,  256,  251,
      226,  306,  307,  200,  200,  200,  493,  226,  226,  304,
      305,  236,  238,  251,  226,  226,  226,  237,  239,  240,

      256,  251,  226,  306,  307,  200,  200,  200,  200,  200,
      200,  308,  200,  493,  200,  493,  200,  200,  200,  200,
      200,  493,  200,  200,  200,  200,  200,  200,  226,  226,
      251,  251,  309,  308,  242,  244,  226,  226,  254,  251,
      243,  265,  310,  255,  311,  312,  200,  200,  200,  493,
      226,  226,  251,  251,  309,  493,  242,  244,  226,  226,
      254,  251,  243,  265,  310,  255,  311,  312,  200,  200,
      200,  200,  200,  200,  493,  200,  493,  200,  493,  200,
      200,  200,  200,  200,  493,  200,  200,  200,  200,  200,
      200,  227,  251,  251,  313,  314,  260,  262,  251,  228,

      251,  251,  261,  263,  266,  315,  251,  316,  493,  200,
      200,  200,  493,  227,  251,  251,  313,  314,  260,  262,
      251,  228,  251,  251,  261,  263,  266,  315,  251,  316,
      251,  200,  200,  200,  200,  226,  267,  251,  251,  493,
      233,  317,  264,  226,  234,  251,  318,  493,  235,  493,
      493,  319,  251,  493,  493,  493,  493,  226,  267,  251,
      251,  271,  233,  317,  264,  226,  234,  251,  318,  274,
      235,  245,  245,  319,  275,  245,  245,  245,  245,  245,
      245,  245,  245,  271,  245,  245,  245,  245,  245,  245,
      276,  274,  271,  208,  376,  271,  275,  277,  271,  281,

      271,  208,  286,  271,  377,  282,  378,  379,  245,  493,
      245,  493,  276,  493,  271,  208,  376,  271,  493,  277,
      271,  281,  271,  208,  286,  271,  377,  282,  378,  379,
      245,  245,  245,  245,  245,  245,  493,  493,  245,  245,
      245,  245,  245,  245,  245,  245,  380,  245,  245,  245,
      245,  245,  245,  252,  271,  271,  381,  382,  283,  271,
      285,  253,  271,  271,  284,  289,  383,  271,  380,  493,
      493,  245,  493,  245,  493,  252,  271,  271,  381,  382,
      283,  271,  285,  253,  271,  271,  284,  289,  383,  271,
      384,  321,  271,  245,  245,  245,  245,  251,  287,  208,

      271,  493,  257,  385,  288,  251,  258,  386,  387,  493,
      259,  493,  384,  321,  271,  493,  493,  493,  493,  251,
      287,  208,  271,  208,  257,  385,  288,  251,  258,  386,
      387,  208,  259,  245,  245,  388,  320,  245,  245,  245,
      245,  245,  245,  245,  245,  208,  245,  245,  245,  245,
      245,  245,  208,  208,  323,  208,  208,  388,  320,  389,
      208,  208,  208,  208,  208,  322,  390,  324,  391,  208,
      245,  493,  245,  493,  208,  493,  323,  208,  208,  493,
      493,  389,  208,  208,  208,  208,  208,  322,  390,  324,
      391,  208,  245,  245,  245,  245,  245,  245,  493,  392,

      245,  245,  245,  245,  245,  245,  245,  245,  208,  245,
      245,  245,  245,  245,  245,  208,  208,  208,  208,  393,
      208,  392,  394,  208,  325,  208,  208,  327,  208,  326,
      208,  395,  329,  245,  493,  245,  493,  208,  208,  208,
      208,  393,  208,  493,  394,  208,  325,  208,  208,  327,
      208,  326,  493,  395,  329,  245,  245,  245,  245,  245,
      245,  396,  493,  245,  245,  245,  245,  245,  245,  245,
      245,  208,  245,  245,  245,  245,  245,  245,  272,  208,
      397,  208,  226,  396,  334,  493,  273,  208,  328,  208,
      226,  330,  226,  208,  332,  208,  245,  493,  245,  493,

      272,  208,  397,  208,  226,  493,  334,  336,  273,  208,
      328,  208,  226,  330,  226,  226,  332,  208,  245,  245,
      245,  245,  271,  442,  208,  226,  226,  278,  331,  336,
      271,  279,  208,  226,  337,  280,  493,  226,  333,  493,
      443,  493,  444,  493,  271,  442,  208,  226,  226,  278,
      331,  493,  271,  279,  208,  226,  337,  280,  200,  200,
      333,  200,  443,  200,  444,  200,  200,  200,  200,  200,
      226,  200,  200,  200,  200,  200,  200,  226,  226,  226,
      226,  226,  251,  335,  493,  226,  338,  226,  226,  226,
      251,  493,  226,  493,  493,  200,  200,  200,  493,  226,

      226,  226,  226,  226,  251,  335,  226,  226,  338,  226,
      226,  226,  251,  226,  226,  226,  226,  200,  200,  200,
      200,  226,  339,  226,  226,  341,  226,  340,  226,  493,
      445,  226,  493,  342,  226,  226,  226,  226,  226,  226,
      343,  344,  493,  226,  339,  226,  226,  341,  226,  340,
      226,  226,  445,  226,  345,  342,  226,  226,  226,  226,
      493,  226,  343,  344,  347,  226,  346,  349,  493,  251,
      251,  493,  226,  226,  446,  251,  345,  251,  251,  226,
      226,  226,  348,  350,  493,  351,  347,  226,  346,  349,
      251,  251,  251,  251,  251,  251,  446,  251,  251,  251,

      251,  352,  251,  251,  348,  350,  251,  351,  493,  447,
      493,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  353,  352,  251,  251,  251,  354,  251,  251,
      251,  447,  357,  251,  448,  251,  251,  251,  251,  355,
      251,  251,  251,  251,  353,  251,  359,  356,  251,  354,
      251,  251,  251,  251,  357,  358,  448,  449,  251,  251,
      251,  355,  271,  450,  251,  360,  251,  251,  359,  356,
      271,  493,  251,  493,  493,  251,  493,  358,  493,  449,
      251,  493,  493,  493,  271,  450,  493,  360,  251,  245,
      245,  493,  271,  245,  245,  245,  245,  245,  245,  245,

      245,  271,  245,  245,  245,  245,  245,  245,  362,  271,
      364,  271,  271,  271,  361,  493,  271,  271,  271,  271,
      365,  271,  469,  271,  363,  271,  245,  493,  245,  493,
      362,  271,  364,  271,  271,  271,  361,  271,  271,  271,
      271,  271,  365,  271,  469,  271,  363,  271,  245,  245,
      245,  245,  271,  367,  271,  271,  271,  493,  366,  271,
      271,  493,  271,  271,  271,  369,  493,  271,  368,  493,
      470,  271,  493,  370,  271,  367,  271,  271,  271,  271,
      366,  493,  271,  271,  271,  271,  271,  369,  271,  493,
      368,  271,  470,  271,  271,  370,  271,  371,  372,  271,

      493,  271,  271,  373,  271,  271,  493,  271,  493,  374,
      271,  375,  271,  271,  493,  493,  271,  493,  271,  371,
      372,  271,  208,  493,  271,  373,  271,  471,  208,  271,
      208,  374,  398,  375,  271,  399,  208,  208,  208,  208,
      401,  400,  493,  402,  208,  208,  208,  208,  472,  471,
      208,  493,  208,  481,  398,  482,  208,  399,  208,  208,
      208,  208,  401,  400,  208,  402,  403,  208,  208,  208,
      472,  208,  208,  208,  208,  481,  208,  482,  208,  208,
      208,  208,  208,  404,  405,  493,  208,  487,  403,  208,
      493,  208,  493,  208,  208,  208,  208,  407,  208,  208,

      406,  208,  208,  208,  208,  404,  405,  226,  226,  487,
      226,  208,  408,  208,  410,  226,  226,  493,  226,  407,
      409,  208,  406,  226,  493,  411,  493,  488,  493,  226,
      226,  226,  226,  226,  408,  226,  410,  226,  226,  413,
      226,  226,  409,  226,  226,  226,  412,  411,  226,  488,
      226,  226,  226,  226,  414,  226,  226,  226,  226,  226,
      493,  413,  415,  226,  493,  226,  226,  226,  412,  226,
      226,  493,  226,  226,  226,  226,  414,  416,  226,  226,
      226,  226,  226,  493,  415,  226,  418,  226,  417,  226,
      226,  226,  251,  419,  251,  493,  420,  226,  251,  416,

      251,  226,  251,  493,  226,  493,  251,  226,  418,  226,
      417,  421,  226,  251,  251,  419,  251,  422,  420,  251,
      251,  251,  251,  251,  251,  423,  251,  251,  251,  425,
      424,  251,  493,  421,  251,  251,  251,  493,  493,  422,
      493,  251,  251,  251,  251,  251,  251,  423,  251,  251,
      251,  425,  424,  251,  251,  251,  251,  426,  251,  251,
      493,  251,  493,  427,  251,  493,  251,  429,  251,  251,
      428,  493,  251,  493,  271,  493,  251,  251,  430,  426,
      271,  251,  271,  251,  493,  427,  271,  493,  271,  429,
      432,  251,  428,  431,  271,  271,  271,  433,  271,  271,

      430,  271,  271,  271,  271,  435,  271,  271,  271,  271,
      271,  434,  432,  493,  271,  431,  271,  271,  493,  433,
      271,  271,  271,  271,  436,  271,  271,  435,  271,  271,
      271,  271,  271,  434,  271,  271,  271,  437,  271,  493,
      271,  271,  493,  438,  271,  271,  436,  271,  271,  271,
      439,  440,  271,  441,  271,  271,  271,  271,  208,  437,
      271,  493,  271,  271,  493,  438,  208,  271,  208,  271,
      208,  271,  439,  440,  208,  441,  208,  271,  208,  208,
      208,  451,  208,  493,  493,  493,  208,  208,  208,  208,
      208,  452,  208,  453,  208,  493,  208,  208,  208,  208,

      208,  208,  208,  451,  208,  493,  493,  208,  208,  208,
      208,  208,  226,  452,  208,  453,  208,  226,  454,  208,
      226,  208,  208,  226,  208,  226,  493,  226,  493,  208,
      455,  226,  208,  226,  226,  226,  208,  456,  226,  226,
      454,  226,  226,  226,  208,  226,  226,  226,  226,  226,
      457,  226,  455,  226,  226,  226,  226,  226,  226,  456,
      226,  458,  226,  226,  493,  226,  226,  226,  226,  493,
      226,  251,  457,  226,  251,  226,  226,  226,  226,  251,
      226,  459,  251,  458,  226,  226,  251,  460,  226,  226,
      251,  493,  493,  251,  251,  493,  251,  226,  251,  226,

      493,  251,  251,  459,  251,  251,  493,  226,  251,  460,
      251,  251,  251,  251,  461,  251,  251,  251,  462,  251,
      251,  271,  251,  251,  251,  251,  463,  251,  493,  271,
      251,  493,  251,  251,  493,  251,  461,  251,  271,  251,
      462,  251,  271,  271,  251,  251,  271,  251,  463,  271,
      271,  271,  251,  271,  271,  464,  493,  271,  465,  271,
      271,  271,  271,  493,  271,  466,  467,  271,  271,  493,
      271,  271,  271,  493,  271,  271,  271,  464,  271,  271,
      465,  271,  271,  271,  271,  271,  271,  466,  467,  271,
      208,  271,  271,  271,  271,  468,  271,  208,  208,  271,

      271,  493,  208,  208,  271,  208,  474,  271,  271,  473,
      208,  208,  208,  271,  226,  271,  271,  468,  226,  208,
      208,  271,  226,  493,  208,  208,  226,  208,  474,  493,
      226,  473,  208,  208,  493,  226,  226,  475,  226,  226,
      226,  251,  476,  226,  226,  493,  251,  226,  226,  251,
      251,  493,  226,  477,  251,  493,  493,  226,  251,  475,
      226,  226,  493,  251,  476,  226,  271,  493,  251,  226,
      251,  251,  251,  478,  271,  477,  251,  271,  251,  271,
      251,  271,  271,  208,  480,  271,  479,  271,  271,  271,
      271,  208,  251,  493,  208,  478,  271,  483,  493,  271,

      251,  271,  208,  271,  271,  208,  480,  271,  479,  271,
      226,  271,  271,  208,  226,  251,  208,  251,  226,  483,
      493,  493,  226,  251,  208,  251,  271,  271,  484,  485,
      208,  493,  226,  493,  271,  271,  226,  251,  208,  251,
      226,  486,  493,  489,  226,  251,  226,  251,  271,  271,
      484,  485,  208,  251,  226,  493,  271,  271,  493,  490,
      208,  251,  208,  486,  271,  489,  491,  493,  226,  493,
      208,  226,  271,  493,  251,  251,  226,  492,  493,  226,
      493,  490,  251,  251,  208,  493,  271,  271,  491,  493,
      493,  493,  208,  226,  271,  271,  251,  493,  493,  492,

      493,  226,  493,  493,  251,  493,  493,  493,  493,  271,
      493,  493,  493,  493,  493,  493,  493,  271,  200,  493,
      200,  493,  200,  208,  493,  208,  493,  208,  225,  493,
      225,  493,  225,  226,  493,  226,  493,  226,  245,  493,
      493,  245,  245,  251,  493,  493,  251,  251,  268,  268,
      268,  268,  268,  270,  493,  493,  270,  270,  271,  493,
      493,  271,  271,  290,  290,  290,  290,  290,    9,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493
    } ;

static const flex_int16_t yy_chk[2333] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,   25,    3,    4,    4,    3,
        4,  496,   25,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

       30,   31,   32,   33,   34,   36,   31,   33,   30,   35,
       34,   33,   37,   38,   39,   35,  495,  494,  290,  247,
      246,   50,   30,   31,   32,   33,   34,   36,   31,   33,
       30,   35,   34,   33,   37,   38,   39,   35,   44,   45,
       46,   47,   48,   50,   45,   47,   44,   46,   48,   47,
       49,   51,   52,   53,  204,  164,   49,  201,   52,  165,
       44,   45,   46,   47,   48,  159,   45,   47,   44,   46,
       48,   47,   49,   51,   52,   53,   74,  164,   49,  121,
       52,  165,  158,   74,   78,   78,  121,   78,  155,   78,
      137,   78,   78,   78,   78,   78,   80,   78,   78,   78,

       78,   78,   78,   81,   80,  166,   86,   85,  167,   80,
       81,   81,   85,  170,   86,   85,   86,  171,   80,  172,
      173,   78,   78,   78,  122,   81,   80,  166,   86,   85,
      167,   80,   81,   81,   85,  170,   86,   85,   86,  171,
      118,  172,  173,   78,   78,   78,   78,   79,   79,  107,
       79,   75,   79,   71,   79,   79,   79,   79,   79,   65,
       79,   79,   79,   79,   79,   79,   79,   83,   84,  174,
      175,   83,   84,   87,   79,   83,   84,   83,   84,   87,
      177,   87,   63,   61,   79,   79,   79,   26,   79,   83,
       84,  174,  175,   83,   84,   87,   79,   83,   84,   83,

       84,   87,  177,   87,   94,   88,   79,   79,   79,   79,
       82,   88,   94,   88,   95,   82,  178,   94,   82,   82,
      100,   95,   95,   82,   22,   19,   94,   88,  100,   16,
      100,   14,   82,   88,   94,   88,   95,   82,  178,   94,
       82,   82,  100,   95,   95,   82,   91,   91,   11,   91,
      100,   91,  100,   91,   91,   91,   91,   91,    9,   91,
       91,   91,   91,   91,   91,   97,   98,  179,  182,   97,
       98,  128,   99,   97,   98,   97,   98,   99,  128,  128,
       99,  183,  184,   91,   91,   91,    0,   97,   98,  179,
      182,   97,   98,  128,   99,   97,   98,   97,   98,   99,

      128,  128,   99,  183,  184,   91,   91,   91,   91,   92,
       92,  185,   92,    0,   92,    0,   92,   92,   92,   92,
       92,    0,   92,   92,   92,   92,   92,   92,  101,  102,
      127,  133,  186,  185,  101,  102,  101,  102,  127,  133,
      101,  133,  189,  127,  190,  191,   92,   92,   92,    0,
      101,  102,  127,  133,  186,    0,  101,  102,  101,  102,
      127,  133,  101,  133,  189,  127,  190,  191,   92,   92,
       92,   92,   93,   93,    0,   93,    0,   93,    0,   93,
       93,   93,   93,   93,    0,   93,   93,   93,   93,   93,
       93,   93,  130,  131,  192,  193,  130,  131,  134,   93,

      130,  131,  130,  131,  134,  194,  134,  196,    0,   93,
       93,   93,    0,   93,  130,  131,  192,  193,  130,  131,
      134,   93,  130,  131,  130,  131,  134,  194,  134,  196,
      135,   93,   93,   93,   93,   96,  135,  132,  135,    0,
       96,  197,  132,   96,   96,  132,  198,    0,   96,    0,
        0,  199,  135,    0,    0,    0,    0,   96,  135,  132,
      135,  142,   96,  197,  132,   96,   96,  132,  198,  142,
       96,  125,  125,  199,  142,  125,  125,  125,  125,  125,
      125,  125,  125,  142,  125,  125,  125,  125,  125,  125,
      143,  142,  148,  208,  292,  145,  142,  143,  143,  145,

      148,  208,  148,  145,  293,  145,  294,  295,  125,    0,
      125,    0,  143,    0,  148,  208,  292,  145,    0,  143,
      143,  145,  148,  208,  148,  145,  293,  145,  294,  295,
      125,  125,  125,  125,  126,  126,    0,    0,  126,  126,
      126,  126,  126,  126,  126,  126,  296,  126,  126,  126,
      126,  126,  126,  126,  146,  147,  297,  299,  146,  150,
      147,  126,  146,  147,  146,  150,  302,  150,  296,    0,
        0,  126,    0,  126,    0,  126,  146,  147,  297,  299,
      146,  150,  147,  126,  146,  147,  146,  150,  302,  150,
      303,  210,  149,  126,  126,  126,  126,  129,  149,  210,

      149,    0,  129,  304,  149,  129,  129,  305,  306,    0,
      129,    0,  303,  210,  149,    0,    0,    0,    0,  129,
      149,  210,  149,  209,  129,  304,  149,  129,  129,  305,
      306,  209,  129,  139,  139,  307,  209,  139,  139,  139,
      139,  139,  139,  139,  139,  209,  139,  139,  139,  139,
      139,  139,  211,  209,  212,  213,  214,  307,  209,  308,
      211,  215,  212,  213,  214,  211,  309,  215,  310,  215,
      139,    0,  139,    0,  211,    0,  212,  213,  214,    0,
        0,  308,  211,  215,  212,  213,  214,  211,  309,  215,
      310,  215,  139,  139,  139,  139,  140,  140,    0,  311,

      140,  140,  140,  140,  140,  140,  140,  140,  216,  140,
      140,  140,  140,  140,  140,  217,  216,  218,  220,  313,
      221,  311,  316,  217,  216,  218,  220,  218,  221,  217,
      216,  317,  220,  140,    0,  140,    0,  217,  216,  218,
      220,  313,  221,    0,  316,  217,  216,  218,  220,  218,
      221,  217,    0,  317,  220,  140,  140,  140,  140,  141,
      141,  318,    0,  141,  141,  141,  141,  141,  141,  141,
      141,  219,  141,  141,  141,  141,  141,  141,  141,  219,
      319,  222,  226,  318,  228,    0,  141,  224,  219,  222,
      226,  222,  228,  219,  224,  224,  141,    0,  141,    0,

      141,  219,  319,  222,  226,    0,  228,  230,  141,  224,
      219,  222,  226,  222,  228,  230,  224,  224,  141,  141,
      141,  141,  144,  377,  223,  227,  231,  144,  223,  230,
      144,  144,  223,  227,  231,  144,    0,  230,  227,    0,
      380,    0,  381,    0,  144,  377,  223,  227,  231,  144,
      223,    0,  144,  144,  223,  227,  231,  144,  225,  225,
      227,  225,  380,  225,  381,  225,  225,  225,  225,  225,
      229,  225,  225,  225,  225,  225,  225,  232,  229,  233,
      234,  240,  251,  229,    0,  232,  234,  233,  234,  240,
      251,    0,  229,    0,    0,  225,  225,  225,    0,  232,

      229,  233,  234,  240,  251,  229,  235,  232,  234,  233,
      234,  240,  251,  236,  235,  237,  238,  225,  225,  225,
      225,  236,  235,  237,  238,  237,  239,  236,  235,    0,
      385,  241,    0,  238,  239,  236,  235,  237,  238,  241,
      239,  241,    0,  236,  235,  237,  238,  237,  239,  236,
      242,  243,  385,  241,  242,  238,  239,  244,  242,  243,
        0,  241,  239,  241,  244,  244,  243,  253,    0,  252,
      254,    0,  242,  243,  387,  253,  242,  252,  254,  244,
      242,  243,  252,  254,    0,  255,  244,  244,  243,  253,
      256,  252,  254,  255,  257,  258,  387,  253,  256,  252,

      254,  258,  257,  258,  252,  254,  259,  255,    0,  390,
        0,  264,  256,  260,  259,  255,  257,  258,  263,  264,
      256,  260,  259,  258,  257,  258,  263,  260,  259,  261,
      262,  390,  263,  264,  391,  260,  259,  261,  262,  261,
      263,  264,  266,  260,  259,  265,  266,  262,  263,  260,
      266,  261,  262,  265,  263,  265,  391,  392,  267,  261,
      262,  261,  271,  397,  266,  267,  267,  265,  266,  262,
      271,    0,  266,    0,    0,  265,    0,  265,    0,  392,
      267,    0,    0,    0,  271,  397,    0,  267,  267,  270,
      270,    0,  271,  270,  270,  270,  270,  270,  270,  270,

      270,  272,  270,  270,  270,  270,  270,  270,  273,  272,
      275,  274,  276,  277,  272,    0,  273,  278,  275,  274,
      276,  277,  443,  272,  274,  278,  270,    0,  270,    0,
      273,  272,  275,  274,  276,  277,  272,  280,  273,  278,
      275,  274,  276,  277,  443,  280,  274,  278,  270,  270,
      270,  270,  279,  280,  281,  282,  283,    0,  279,  280,
      279,    0,  281,  282,  283,  282,    0,  280,  281,    0,
      444,  285,    0,  283,  279,  280,  281,  282,  283,  285,
      279,    0,  279,  284,  281,  282,  283,  282,  286,    0,
      281,  284,  444,  285,  288,  283,  286,  284,  286,  287,

        0,  285,  288,  287,  289,  284,    0,  287,    0,  288,
      286,  289,  289,  284,    0,    0,  288,    0,  286,  284,
      286,  287,  321,    0,  288,  287,  289,  448,  320,  287,
      321,  288,  320,  289,  289,  321,  320,  322,  323,  324,
      323,  322,    0,  324,  321,  322,  323,  324,  449,  448,
      320,    0,  321,  469,  320,  471,  325,  321,  320,  322,
      323,  324,  323,  322,  325,  324,  325,  322,  323,  324,
      449,  326,  327,  328,  329,  469,  330,  471,  325,  326,
      327,  328,  329,  327,  330,    0,  325,  481,  325,  332,
        0,  331,    0,  326,  327,  328,  329,  332,  330,  331,

      331,  326,  327,  328,  329,  327,  330,  334,  333,  481,
      335,  332,  333,  331,  335,  334,  333,    0,  335,  332,
      334,  331,  331,  336,    0,  336,    0,  482,    0,  334,
      333,  336,  335,  337,  333,  338,  335,  334,  333,  338,
      335,  337,  334,  338,  339,  336,  337,  336,  340,  482,
      342,  341,  339,  336,  339,  337,  340,  338,  342,  341,
        0,  338,  341,  337,    0,  338,  339,  343,  337,  344,
      340,    0,  342,  341,  339,  343,  339,  344,  340,  345,
      342,  341,  346,    0,  341,  347,  346,  345,  345,  343,
      346,  344,  348,  347,  354,    0,  348,  343,  349,  344,

      348,  345,  354,    0,  346,    0,  349,  347,  346,  345,
      345,  349,  346,  350,  348,  347,  354,  350,  348,  353,
      349,  350,  348,  351,  354,  351,  352,  353,  349,  353,
      352,  351,    0,  349,  352,  350,  356,    0,    0,  350,
        0,  353,  357,  350,  356,  351,  355,  351,  352,  353,
      357,  353,  352,  351,  355,  358,  352,  355,  356,  360,
        0,  359,    0,  358,  357,    0,  356,  360,  355,  359,
      359,    0,  357,    0,  361,    0,  355,  358,  361,  355,
      362,  360,  361,  359,    0,  358,  363,    0,  362,  360,
      363,  359,  359,  362,  363,  364,  361,  364,  365,  368,

      361,  366,  362,  364,  361,  366,  365,  368,  363,  366,
      362,  365,  363,    0,  367,  362,  363,  364,    0,  364,
      365,  368,  367,  366,  367,  364,  369,  366,  365,  368,
      370,  366,  371,  365,  369,  372,  367,  369,  370,    0,
      371,  373,    0,  372,  367,  375,  367,  374,  369,  373,
      373,  374,  370,  375,  371,  374,  369,  372,  398,  369,
      370,    0,  371,  373,    0,  372,  398,  375,  399,  374,
      400,  373,  373,  374,  401,  375,  399,  374,  400,  402,
      398,  399,  401,    0,    0,    0,  403,  402,  398,  404,
      399,  402,  400,  403,  403,    0,  401,  404,  399,  405,

      400,  402,  406,  399,  401,    0,    0,  405,  403,  402,
      406,  404,  408,  402,  407,  403,  403,  409,  407,  404,
      408,  405,  407,  410,  406,  409,    0,  411,    0,  405,
      409,  410,  406,  412,  408,  411,  407,  412,  413,  409,
      407,  412,  408,  415,  407,  410,  413,  409,  416,  411,
      413,  415,  409,  410,  414,  412,  416,  411,  417,  412,
      413,  414,  414,  412,    0,  415,  417,  418,  413,    0,
      416,  420,  413,  415,  421,  418,  414,  419,  416,  420,
      417,  419,  421,  414,  414,  419,  422,  421,  417,  418,
      423,    0,    0,  420,  422,    0,  421,  418,  423,  419,

        0,  420,  424,  419,  421,  426,    0,  419,  422,  421,
      424,  425,  423,  426,  424,  427,  422,  428,  425,  425,
      423,  430,  429,  427,  424,  428,  429,  426,    0,  430,
      429,    0,  424,  425,    0,  426,  424,  427,  432,  428,
      425,  425,  431,  430,  429,  427,  432,  428,  429,  433,
      431,  430,  429,  435,  434,  431,    0,  433,  434,  436,
      432,  435,  434,    0,  431,  435,  436,  436,  432,    0,
      437,  433,  431,    0,  438,  435,  434,  431,  437,  433,
      434,  436,  438,  435,  434,  439,  440,  435,  436,  436,
      451,  441,  437,  439,  440,  441,  438,  454,  451,  441,

      437,    0,  452,  453,  438,  454,  453,  439,  440,  452,
      452,  453,  451,  441,  455,  439,  440,  441,  456,  454,
      451,  441,  455,    0,  452,  453,  456,  454,  453,    0,
      457,  452,  452,  453,    0,  459,  455,  457,  457,  458,
      456,  460,  458,  459,  455,    0,  461,  458,  456,  460,
      463,    0,  457,  461,  461,    0,    0,  459,  463,  457,
      457,  458,    0,  460,  458,  459,  464,    0,  461,  458,
      462,  460,  463,  462,  464,  461,  461,  465,  462,  466,
      463,  467,  468,  473,  467,  465,  466,  466,  464,  467,
      468,  473,  462,    0,  474,  462,  464,  473,    0,  465,

      462,  466,  474,  467,  468,  473,  467,  465,  466,  466,
      476,  467,  468,  473,  475,  477,  474,  478,  476,  473,
        0,    0,  475,  477,  474,  478,  480,  479,  475,  477,
      483,    0,  476,    0,  480,  479,  475,  477,  483,  478,
      476,  479,    0,  483,  475,  477,  484,  478,  480,  479,
      475,  477,  483,  485,  484,    0,  480,  479,    0,  484,
      483,  485,  489,  479,  486,  483,  485,    0,  484,    0,
      489,  490,  486,    0,  491,  485,  484,  486,    0,  490,
        0,  484,  491,  485,  489,    0,  486,  492,  485,    0,
        0,    0,  489,  490,  486,  492,  491,    0,    0,  486,

        0,  490,    0,    0,  491,    0,    0,    0,    0,  492,
        0,    0,    0,    0,    0,    0,    0,  492,  497,    0,
      497,    0,  497,  498,    0,  498,    0,  498,  499,    0,
      499,    0,  499,  500,    0,  500,    0,  500,  501,    0,
        0,  501,  501,  502,    0,    0,  502,  502,  503,  503,
      503,  503,  503,  504,    0,    0,  504,  504,  505,    0,
        0,  505,  505,  506,  506,  506,  506,  506,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[65] =
    {   0,
1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./CoolLexer.flex"
#line 2 "./CoolLexer.flex"
#include <iostream>
#include <fstream>
#include <cstdio>
#include <string>

#include "CoolParser.h"
#include "CoolLexer.h"

#undef YY_DECL
#define YY_DECL int CoolLexer::yylex()
#define ERROR -1;
int comment_level = 0;
#line 1126 "CoolLexer.cpp"

#line 1128 "CoolLexer.cpp"

#define INITIAL 0
#define COMMENT_INLINE 1
#define COMMENT 2
#define STR 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 32 "./CoolLexer.flex"

#line 1265 "CoolLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 494 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 493 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 33 "./CoolLexer.flex"
{ ++lineno; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "./CoolLexer.flex"
{ Error("Wrong comment close-bracket"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 35 "./CoolLexer.flex"
{ BEGIN(COMMENT); comment_level = 0; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 36 "./CoolLexer.flex"
{ ++comment_level; }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 37 "./CoolLexer.flex"
{ Error("Unterminated comment"); BEGIN(INITIAL); return ERROR; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 38 "./CoolLexer.flex"
{ ++lineno; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 39 "./CoolLexer.flex"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 40 "./CoolLexer.flex"
{ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 41 "./CoolLexer.flex"
{
                      if (comment_level == 0) BEGIN(INITIAL);
                      --comment_level;
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 50 "./CoolLexer.flex"
{yymore();
                BEGIN(STR);
                }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 53 "./CoolLexer.flex"
{ Error("one_line_string");
                  BEGIN(INITIAL);
                  ++lineno;
                  return 0;
                }
	YY_BREAK
case YY_STATE_EOF(STR):
#line 58 "./CoolLexer.flex"
{return 0;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 59 "./CoolLexer.flex"
{return 0;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 60 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 61 "./CoolLexer.flex"
{yymore();}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 62 "./CoolLexer.flex"
{++lineno;
                  yymore();
                }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "./CoolLexer.flex"
{
                Escape();
                BEGIN(INITIAL);
                return TOKEN_STR;
                }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 73 "./CoolLexer.flex"
return TOKEN_CLASS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 74 "./CoolLexer.flex"
return TOKEN_TRUE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 75 "./CoolLexer.flex"
return TOKEN_FALSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 76 "./CoolLexer.flex"
return TOKEN_ELSE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 77 "./CoolLexer.flex"
return TOKEN_FI;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 78 "./CoolLexer.flex"
return TOKEN_IF;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 79 "./CoolLexer.flex"
return TOKEN_IN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 80 "./CoolLexer.flex"
return TOKEN_INHERITS;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 81 "./CoolLexer.flex"
return TOKEN_ISVOID;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 82 "./CoolLexer.flex"
return TOKEN_LET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "./CoolLexer.flex"
return TOKEN_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 84 "./CoolLexer.flex"
return TOKEN_POOL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 85 "./CoolLexer.flex"
return TOKEN_THEN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 86 "./CoolLexer.flex"
return TOKEN_WHILE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 87 "./CoolLexer.flex"
return TOKEN_CASE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 88 "./CoolLexer.flex"
return TOKEN_ESAC;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 89 "./CoolLexer.flex"
return TOKEN_NEW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 90 "./CoolLexer.flex"
return TOKEN_OF;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 91 "./CoolLexer.flex"
return TOKEN_NOT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 93 "./CoolLexer.flex"
return TOKEN_COMMA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 94 "./CoolLexer.flex"
return TOKEN_DOT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 95 "./CoolLexer.flex"
return TOKEN_AT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 96 "./CoolLexer.flex"
return TOKEN_TILDA;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 97 "./CoolLexer.flex"
return TOKEN_MUL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 98 "./CoolLexer.flex"
return TOKEN_DIV;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 99 "./CoolLexer.flex"
return TOKEN_PLUS;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 100 "./CoolLexer.flex"
return TOKEN_MINUS;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 101 "./CoolLexer.flex"
return TOKEN_LE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 102 "./CoolLexer.flex"
return TOKEN_ME;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "./CoolLexer.flex"
return TOKEN_MORE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 104 "./CoolLexer.flex"
return TOKEN_LESS;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 105 "./CoolLexer.flex"
return TOKEN_EQ;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 106 "./CoolLexer.flex"
return TOKEN_ARROW;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "./CoolLexer.flex"
return TOKEN_OPEN_CURLY_BRACE;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "./CoolLexer.flex"
return TOKEN_CLOSE_CURLY_BRACE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "./CoolLexer.flex"
return TOKEN_OPEN_PARENTHESIS;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "./CoolLexer.flex"
return TOKEN_CLOSE_PARENTHESIS;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "./CoolLexer.flex"
return TOKEN_OPEN_SQUARE_BRACKET;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "./CoolLexer.flex"
return TOKEN_CLOSE_SQUARE_BRACKET;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 117 "./CoolLexer.flex"
return TOKEN_SEMICOLON;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 118 "./CoolLexer.flex"
return TOKEN_COLON;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 120 "./CoolLexer.flex"
return TOKEN_DIGITAL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 122 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OBJECT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 123 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_TYPE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 124 "./CoolLexer.flex"
return TOKEN_IDENTIFIER_OTHER;
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 128 "./CoolLexer.flex"
++lineno;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "./CoolLexer.flex"
{ /* skip spaces */}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "./CoolLexer.flex"
Error("unrecognized character");
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "./CoolLexer.flex"
ECHO;
	YY_BREAK
#line 1682 "CoolLexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT_INLINE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 63);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 494 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 63;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 494 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 493);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 132 "./CoolLexer.flex"


void CoolLexer::Error(const char* msg) const
{
    std::cerr << "Lexer error (line " << lineno << "): " << msg << ": lexeme '" << YYText() << "'\n";
    std::exit(YY_EXIT_FAILURE);
}

void CoolLexer::Escape(){
    const char *input = yytext;
    char *output = yytext;
    input++; // Skip opening '\"'
    while (*(input + 1) /* Skip closing '\"' */ ) {
        if (*input == '\\') {
            input++; // Skip '\\'
            switch (*input) {
                case 'n': *output++ = '\n'; break;
                case 't': *output++ = '\t'; break;
                case 'f': *output++ = '\f'; break;
                case 'b': *output++ = '\b'; break;
                default: *output++ = *input;
            }
        } else {
            *output++ = *input;
        }
        input++;
    }
    *output = '\0';
    std::string str = yytext;
    std::cout <<"CODE_SYMBOL:  ";
    for(char ch : str){
        std::cout << static_cast<int>(ch) << " ";
    }
    std::cout << "\n";
}

